{"ast":null,"code":"// src/api/axios.js\nimport axios from 'axios';\n\n// Create a custom axios instance with your backend URL\nconst API = axios.create({\n  baseURL: 'http://localhost:8000/api/',\n  // Your Django API URL\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // Include cookies with cross-origin requests\n});\n\n// Add request interceptor to include auth token with every request\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle token refresh\nAPI.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If error is 401 Unauthorized and not already retrying\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Try to refresh the token\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await axios.post('http://localhost:8000/api/auth/refresh/', {\n        refresh: refreshToken\n      });\n      const {\n        access\n      } = response.data;\n\n      // Update stored token\n      localStorage.setItem('access_token', access);\n\n      // Update authorization header\n      originalRequest.headers['Authorization'] = `Bearer ${access}`;\n\n      // Retry the original request\n      return axios(originalRequest);\n    } catch (refreshError) {\n      // Refresh token failed, redirect to login\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport const studentAPI = {\n  getAll: (params = {}) => API.get('students/', {\n    params\n  }),\n  getById: id => API.get(`students/${id}/`),\n  create: data => API.post('students/', data),\n  update: (id, data) => API.put(`students/${id}/`, data),\n  delete: id => API.delete(`students/${id}/`),\n  bulkImport: formData => API.post('students/bulk_import/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  })\n};\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","Error","post","refresh","access","data","setItem","refreshError","removeItem","window","location","href","studentAPI","getAll","params","get","getById","id","update","put","delete","bulkImport","formData"],"sources":["C:/Users/Dell/Desktop/BITS PILANI/FSD/Assignment_1/React/frontend/src/api/axios.js"],"sourcesContent":["// src/api/axios.js\r\nimport axios from 'axios';\r\n\r\n// Create a custom axios instance with your backend URL\r\nconst API = axios.create({\r\n    baseURL: 'http://localhost:8000/api/',  // Your Django API URL\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    withCredentials: true  // Include cookies with cross-origin requests\r\n});\r\n\r\n// Add request interceptor to include auth token with every request\r\nAPI.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('access_token');\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Add response interceptor to handle token refresh\r\nAPI.interceptors.response.use(\r\n    (response) => {\r\n        return response;\r\n    },\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n        \r\n        // If error is 401 Unauthorized and not already retrying\r\n        if (error.response?.status === 401 && !originalRequest._retry) {\r\n            originalRequest._retry = true;\r\n            \r\n            try {\r\n                // Try to refresh the token\r\n                const refreshToken = localStorage.getItem('refresh_token');\r\n                if (!refreshToken) {\r\n                    throw new Error('No refresh token available');\r\n                }\r\n                \r\n                const response = await axios.post('http://localhost:8000/api/auth/refresh/', {\r\n                    refresh: refreshToken\r\n                });\r\n                \r\n                const { access } = response.data;\r\n                \r\n                // Update stored token\r\n                localStorage.setItem('access_token', access);\r\n                \r\n                // Update authorization header\r\n                originalRequest.headers['Authorization'] = `Bearer ${access}`;\r\n                \r\n                // Retry the original request\r\n                return axios(originalRequest);\r\n            } catch (refreshError) {\r\n                // Refresh token failed, redirect to login\r\n                localStorage.removeItem('access_token');\r\n                localStorage.removeItem('refresh_token');\r\n                localStorage.removeItem('user');\r\n                window.location.href = '/login';\r\n                return Promise.reject(refreshError);\r\n            }\r\n        }\r\n        \r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport const studentAPI = {\r\n  getAll: (params = {}) => API.get('students/', { params }),\r\n  getById: (id) => API.get(`students/${id}/`),\r\n  create: (data) => API.post('students/', data),\r\n  update: (id, data) => API.put(`students/${id}/`, data),\r\n  delete: (id) => API.delete(`students/${id}/`),\r\n  bulkImport: (formData) => API.post('students/bulk_import/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  }),\r\n};\r\n\r\nexport default API;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}