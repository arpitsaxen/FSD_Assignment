{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\BITS PILANI\\\\FSD\\\\Assignment_1\\\\React\\\\frontend\\\\src\\\\components\\\\drives\\\\DriveForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { Box, Typography, TextField, Button, Grid, Paper, CircularProgress, FormControl, InputLabel, Select, MenuItem, Alert, Divider, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Autocomplete, Chip, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\nimport { Save as SaveIcon, ArrowBack as ArrowBackIcon, PersonAdd as PersonAddIcon } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DriveForm = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const isEditMode = Boolean(id);\n  const [loading, setLoading] = useState(isEditMode);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [formErrors, setFormErrors] = useState({});\n  const [vaccines, setVaccines] = useState([]);\n  const [vaccinatedStudents, setVaccinatedStudents] = useState([]);\n  const [openStudentDialog, setOpenStudentDialog] = useState(false);\n  const [availableStudents, setAvailableStudents] = useState([]);\n  const [selectedStudents, setSelectedStudents] = useState([]);\n  const [studentSearch, setStudentSearch] = useState('');\n  const [loadingStudents, setLoadingStudents] = useState(false);\n  const [vaccinationErrors, setVaccinationErrors] = useState([]);\n  const [formData, setFormData] = useState({\n    vaccine: '',\n    date: '',\n    doses_available: '',\n    applicable_grades: ''\n  });\n\n  // Calculate minimum date (15 days from today)\n  const getMinDate = () => {\n    const today = new Date();\n    const minDate = new Date(today);\n    minDate.setDate(today.getDate() + 15);\n    return minDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n  };\n\n  // Fetch drive data and vaccines\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch vaccines\n        const vaccinesResponse = await axios.get('http://localhost:8000/api/vaccines/');\n        setVaccines(vaccinesResponse.data);\n        if (isEditMode) {\n          // Fetch drive data\n          const driveResponse = await axios.get(`http://localhost:8000/api/drives/${id}/`);\n          setFormData({\n            vaccine: driveResponse.data.vaccine,\n            date: driveResponse.data.date,\n            doses_available: driveResponse.data.doses_available,\n            applicable_grades: driveResponse.data.applicable_grades\n          });\n\n          // Fetch vaccinated students for this drive\n          await refreshVaccinatedStudents();\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Failed to load data');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [id, isEditMode]);\n\n  // Refresh the list of vaccinated students\n  const refreshVaccinatedStudents = async () => {\n    try {\n      const vaccinationsResponse = await axios.get('http://localhost:8000/api/vaccinations/', {\n        params: {\n          drive_id: id\n        }\n      });\n      console.log(\"Vaccinated students:\", vaccinationsResponse.data);\n      setVaccinatedStudents(vaccinationsResponse.data);\n      return vaccinationsResponse.data;\n    } catch (error) {\n      console.error('Error fetching vaccinated students:', error);\n      return [];\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n\n    // Clear error for this field when user changes it\n    if (formErrors[name]) {\n      setFormErrors({\n        ...formErrors,\n        [name]: null\n      });\n    }\n  };\n  const validateForm = () => {\n    const errors = {};\n    if (!formData.vaccine) errors.vaccine = 'Vaccine is required';\n    if (!formData.date) errors.date = 'Date is required';\n    if (!formData.doses_available) errors.doses_available = 'Number of doses is required';\n    if (!formData.applicable_grades) errors.applicable_grades = 'Applicable grades is required';\n\n    // Validate date is at least 15 days in the future\n    const minDate = getMinDate();\n    if (formData.date && formData.date < minDate) {\n      errors.date = `Date must be at least 15 days in the future (after ${minDate})`;\n    }\n\n    // Check if doses is a positive number\n    if (formData.doses_available && parseInt(formData.doses_available, 10) <= 0) {\n      errors.doses_available = 'Number of doses must be positive';\n    }\n\n    // Check if applicable grades has valid format\n    if (formData.applicable_grades && !/^[0-9]+(-[0-9]+)?$/.test(formData.applicable_grades)) {\n      errors.applicable_grades = 'Format should be like \"5\" or \"5-7\"';\n    }\n    return errors;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setFormErrors({});\n    setSuccess('');\n\n    // Validate form\n    const errors = validateForm();\n    if (Object.keys(errors).length > 0) {\n      setFormErrors(errors);\n      return;\n    }\n    setSaving(true);\n    try {\n      if (isEditMode) {\n        await axios.put(`http://localhost:8000/api/drives/${id}/`, formData);\n        setSuccess('Vaccination drive updated successfully');\n      } else {\n        const response = await axios.post('http://localhost:8000/api/drives/', formData);\n        setSuccess('Vaccination drive created successfully');\n        // Navigate to edit page for the newly created drive\n        setTimeout(() => {\n          navigate(`/drives/edit/${response.data.id}`);\n        }, 1500);\n      }\n    } catch (error) {\n      console.error('Error saving drive:', error);\n      if (error.response && error.response.data) {\n        // Handle field-specific errors\n        if (typeof error.response.data === 'object') {\n          if (error.response.data.date) {\n            // Handle date validation error\n            setFormErrors({\n              ...formErrors,\n              date: Array.isArray(error.response.data.date) ? error.response.data.date[0] : error.response.data.date\n            });\n          } else {\n            // Handle other field errors\n            setFormErrors(error.response.data);\n          }\n        } else {\n          // Generic error\n          setError(error.response.data.toString() || 'Failed to save vaccination drive');\n        }\n      } else {\n        setError('Failed to save vaccination drive. Please try again.');\n      }\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Custom function to check if student is already vaccinated with this vaccine\n  const getAlreadyVaccinatedStudents = async () => {\n    try {\n      // Get the current vaccine ID from the drive\n      const vaccineId = formData.vaccine;\n      if (!vaccineId) return [];\n\n      // Get all vaccinations for all students\n      const allVaccinationsResponse = await axios.get('http://localhost:8000/api/vaccinations/');\n      const allVaccinations = allVaccinationsResponse.data;\n\n      // Filter vaccinations for the current vaccine\n      const vaccinationsWithSameVaccine = allVaccinations.filter(v => {\n        // Need to check if vaccination_drive contains the same vaccine\n        return v.vaccination_drive && v.vaccination_drive.vaccine === parseInt(vaccineId);\n      });\n\n      // Extract student IDs\n      return vaccinationsWithSameVaccine.map(v => v.student);\n    } catch (error) {\n      console.error('Error checking vaccinated students:', error);\n      return [];\n    }\n  };\n  const handleOpenStudentDialog = async () => {\n    try {\n      setError('');\n      setVaccinationErrors([]);\n      setLoadingStudents(true);\n\n      // Ensure we have grade values to use\n      if (!formData.applicable_grades) {\n        setError('Please specify applicable grades before adding students');\n        setLoadingStudents(false);\n        return;\n      }\n\n      // Parse the grade range\n      let minGrade, maxGrade;\n      if (formData.applicable_grades.includes('-')) {\n        const grades = formData.applicable_grades.split('-');\n        minGrade = parseInt(grades[0], 10);\n        maxGrade = parseInt(grades[1], 10);\n      } else {\n        minGrade = maxGrade = parseInt(formData.applicable_grades, 10);\n      }\n      console.log(`Fetching students for grades ${minGrade} to ${maxGrade}`);\n\n      // Fetch all students\n      const studentsResponse = await axios.get('http://localhost:8000/api/students/');\n      console.log(\"All students:\", studentsResponse.data);\n\n      // Get students already vaccinated with this vaccine\n      const alreadyVaccinatedIds = await getAlreadyVaccinatedStudents();\n      console.log(\"Already vaccinated with this vaccine:\", alreadyVaccinatedIds);\n\n      // Fetch current vaccinated students in this drive to exclude them\n      const currentVaccinated = await refreshVaccinatedStudents();\n      const currentVaccinatedIds = currentVaccinated.map(v => v.student);\n\n      // Filter eligible students\n      const eligibleStudents = studentsResponse.data.filter(student => {\n        const studentGrade = parseInt(student.grade, 10);\n        // Check grade in range\n        const gradeInRange = studentGrade >= minGrade && studentGrade <= maxGrade;\n        // Check not already vaccinated in this drive\n        const notInCurrentDrive = !currentVaccinatedIds.includes(student.id);\n        // Check not already vaccinated with this vaccine in any drive\n        const notAlreadyVaccinated = !alreadyVaccinatedIds.includes(student.id);\n        return gradeInRange && notInCurrentDrive && notAlreadyVaccinated;\n      });\n      console.log(\"Eligible students:\", eligibleStudents);\n      setAvailableStudents(eligibleStudents);\n      setOpenStudentDialog(true);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error fetching available students:', error);\n      setError('Failed to load available students: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message));\n    } finally {\n      setLoadingStudents(false);\n    }\n  };\n  const handleVaccinateStudents = async () => {\n    if (selectedStudents.length === 0) {\n      setError('Please select at least one student');\n      return;\n    }\n    setError('');\n    setSuccess('');\n    setVaccinationErrors([]);\n    setSaving(true);\n    try {\n      console.log(\"Attempting to vaccinate students:\", selectedStudents.map(s => s.id));\n\n      // Check if we have enough doses left\n      const currentVaccinations = await refreshVaccinatedStudents();\n      const currentCount = currentVaccinations.length;\n      const remainingDoses = formData.doses_available - currentCount;\n      if (selectedStudents.length > remainingDoses) {\n        setError(`Cannot add ${selectedStudents.length} students. Only ${remainingDoses} doses available.`);\n        setSaving(false);\n        return;\n      }\n\n      // Track successful and failed vaccinations\n      const successfulVaccinations = [];\n      const failedVaccinations = [];\n\n      // Process each student one by one to handle individual errors\n      for (const student of selectedStudents) {\n        try {\n          await axios.post('http://localhost:8000/api/vaccinations/', {\n            student: student.id,\n            vaccination_drive: id,\n            date_administered: new Date().toISOString().split('T')[0]\n          });\n          successfulVaccinations.push(student);\n        } catch (error) {\n          console.error(`Error vaccinating student ${student.id}:`, error);\n\n          // Extract error message\n          let errorMessage = 'Unknown error';\n          if (error.response && error.response.data) {\n            if (Array.isArray(error.response.data)) {\n              errorMessage = error.response.data[0];\n            } else if (typeof error.response.data === 'string') {\n              errorMessage = error.response.data;\n            } else {\n              errorMessage = JSON.stringify(error.response.data);\n            }\n          }\n          failedVaccinations.push({\n            student: student,\n            error: errorMessage\n          });\n        }\n      }\n\n      // Refresh vaccinated students list\n      await refreshVaccinatedStudents();\n\n      // Set success or error messages\n      if (successfulVaccinations.length > 0) {\n        setSuccess(`Successfully vaccinated ${successfulVaccinations.length} students`);\n      }\n      if (failedVaccinations.length > 0) {\n        setVaccinationErrors(failedVaccinations);\n        if (successfulVaccinations.length === 0) {\n          setError(`Failed to vaccinate any students. See details below.`);\n        }\n      }\n\n      // Close dialog if all operations were successful\n      if (failedVaccinations.length === 0) {\n        setOpenStudentDialog(false);\n      }\n\n      // Remove successfully vaccinated students from selection\n      setSelectedStudents(selectedStudents.filter(student => !successfulVaccinations.some(s => s.id === student.id)));\n    } catch (error) {\n      console.error('Error during vaccination process:', error);\n      setError('An unexpected error occurred: ' + (error.message || 'Unknown error'));\n    } finally {\n      setSaving(false);\n    }\n  };\n  const handleStudentSearchChange = (e, value) => {\n    setStudentSearch(e.target.value);\n  };\n  const filterStudentsBySearch = () => {\n    if (!studentSearch || studentSearch.length < 2) return availableStudents;\n    return availableStudents.filter(student => {\n      const fullName = `${student.first_name} ${student.last_name}`.toLowerCase();\n      const id = student.student_id.toLowerCase();\n      const search = studentSearch.toLowerCase();\n      return fullName.includes(search) || id.includes(search);\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '50vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this);\n  }\n  const isPastDrive = isEditMode && new Date(formData.date) < new Date();\n  const filteredStudents = filterStudentsBySearch();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 22\n        }, this),\n        onClick: () => navigate('/drives'),\n        sx: {\n          mr: 2\n        },\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: isEditMode ? 'Edit Vaccination Drive' : 'Create Vaccination Drive'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 2\n      },\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 9\n    }, this), isPastDrive && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"warning\",\n      sx: {\n        mb: 2\n      },\n      children: \"This drive is in the past and cannot be edited.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              error: !!formErrors.vaccine,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                children: \"Vaccine\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                name: \"vaccine\",\n                value: formData.vaccine,\n                onChange: handleInputChange,\n                label: \"Vaccine\",\n                disabled: isPastDrive || isEditMode // Don't allow changing vaccine for existing drives\n                ,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  disabled: true,\n                  children: \"Select a vaccine\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 446,\n                  columnNumber: 19\n                }, this), vaccines.map(vaccine => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: vaccine.id,\n                  children: vaccine.name\n                }, vaccine.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 17\n              }, this), formErrors.vaccine && /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"caption\",\n                color: \"error\",\n                children: formErrors.vaccine\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"date\",\n              label: \"Drive Date\",\n              type: \"date\",\n              value: formData.date,\n              onChange: handleInputChange,\n              fullWidth: true,\n              required: true,\n              InputLabelProps: {\n                shrink: true\n              },\n              disabled: isPastDrive,\n              error: !!formErrors.date,\n              helperText: formErrors.date || `Must be after ${getMinDate()} (15 days from today)`,\n              inputProps: {\n                min: getMinDate()\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"doses_available\",\n              label: \"Available Doses\",\n              type: \"number\",\n              value: formData.doses_available,\n              onChange: handleInputChange,\n              fullWidth: true,\n              required: true,\n              disabled: isPastDrive,\n              error: !!formErrors.doses_available,\n              helperText: formErrors.doses_available,\n              inputProps: {\n                min: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"applicable_grades\",\n              label: \"Applicable Grades\",\n              value: formData.applicable_grades,\n              onChange: handleInputChange,\n              fullWidth: true,\n              required: true,\n              disabled: isPastDrive,\n              error: !!formErrors.applicable_grades,\n              helperText: formErrors.applicable_grades || \"E.g., '5-7' for grades 5 to 7, or '5' for just grade 5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 28\n              }, this),\n              disabled: saving || isPastDrive,\n              sx: {\n                mt: 2\n              },\n              children: saving ? 'Saving...' : isEditMode ? 'Update Drive' : 'Create Drive'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this), isEditMode && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: \"Vaccinated Students\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          startIcon: /*#__PURE__*/_jsxDEV(PersonAddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 26\n          }, this),\n          onClick: handleOpenStudentDialog,\n          disabled: isPastDrive || loadingStudents,\n          children: loadingStudents ? 'Loading...' : 'Add Students'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          p: 3\n        },\n        children: vaccinatedStudents.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"No students have been vaccinated in this drive yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(TableContainer, {\n          children: [/*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Student ID\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 548,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 549,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Date Administered\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 550,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 547,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: vaccinatedStudents.map(record => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: record.student_id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 556,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: record.student_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 557,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: new Date(record.date_administered).toLocaleDateString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 558,\n                  columnNumber: 25\n                }, this)]\n              }, record.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 555,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2,\n              textAlign: 'right'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [vaccinatedStudents.length, \" of \", formData.doses_available, \" doses used\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openStudentDialog,\n      onClose: () => !saving && setOpenStudentDialog(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Add Students to Vaccination Drive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [vaccinationErrors.length > 0 && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"warning\",\n          sx: {\n            mb: 2\n          },\n          children: [\"Some students could not be vaccinated:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              margin: '8px 0 0 0',\n              paddingLeft: '24px'\n            },\n            children: vaccinationErrors.map((error, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [error.student.first_name, \" \", error.student.last_name, \": \", error.error]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 3,\n            mt: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Search Students\",\n            variant: \"outlined\",\n            fullWidth: true,\n            value: studentSearch,\n            onChange: handleStudentSearchChange,\n            placeholder: \"Type to search by name or ID...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          paragraph: true,\n          children: \"Showing students in applicable grades who haven't received this vaccine yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this), availableStudents.length === 0 && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            textAlign: 'center',\n            py: 2\n          },\n          children: \"No eligible students found. All students in the applicable grades may already be vaccinated with this vaccine.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 13\n        }, this), availableStudents.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2,\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 1\n            },\n            children: selectedStudents.map(student => /*#__PURE__*/_jsxDEV(Chip, {\n              label: `${student.first_name} ${student.last_name}`,\n              onDelete: () => setSelectedStudents(selectedStudents.filter(s => s.id !== student.id)),\n              color: \"primary\",\n              size: \"small\"\n            }, student.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 621,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n            component: Paper,\n            variant: \"outlined\",\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              size: \"small\",\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Student ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 635,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 636,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Grade\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 637,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Section\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 638,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 634,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 633,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: [filteredStudents.length === 0 ? /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    colSpan: 4,\n                    align: \"center\",\n                    children: \"No students match your search criteria\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 644,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 643,\n                  columnNumber: 23\n                }, this) : filteredStudents.slice(0, 10).map(student => {\n                  const isSelected = selectedStudents.some(s => s.id === student.id);\n                  return /*#__PURE__*/_jsxDEV(TableRow, {\n                    selected: isSelected,\n                    hover: true,\n                    onClick: () => {\n                      if (isSelected) {\n                        setSelectedStudents(selectedStudents.filter(s => s.id !== student.id));\n                      } else {\n                        setSelectedStudents([...selectedStudents, student]);\n                      }\n                    },\n                    sx: {\n                      cursor: 'pointer'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                      children: student.student_id\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 666,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: `${student.first_name} ${student.last_name}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 667,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: student.grade\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 668,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: student.section\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 669,\n                      columnNumber: 29\n                    }, this)]\n                  }, student.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 653,\n                    columnNumber: 27\n                  }, this);\n                }), filteredStudents.length > 10 && /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    colSpan: 4,\n                    align: \"center\",\n                    children: [filteredStudents.length - 10, \" more students available. Refine your search to see more.\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 676,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 675,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpenStudentDialog(false),\n          disabled: saving,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleVaccinateStudents,\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: selectedStudents.length === 0 || saving,\n          children: saving ? 'Processing...' : `Add Selected Students (${selectedStudents.length})`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 405,\n    columnNumber: 5\n  }, this);\n};\n_s(DriveForm, \"zS0GT+LWxy+LmMIc6g8ZFBf1QXM=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = DriveForm;\nexport default DriveForm;\nvar _c;\n$RefreshReg$(_c, \"DriveForm\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","Box","Typography","TextField","Button","Grid","Paper","CircularProgress","FormControl","InputLabel","Select","MenuItem","Alert","Divider","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Autocomplete","Chip","Dialog","DialogActions","DialogContent","DialogTitle","Save","SaveIcon","ArrowBack","ArrowBackIcon","PersonAdd","PersonAddIcon","jsxDEV","_jsxDEV","DriveForm","_s","id","navigate","isEditMode","Boolean","loading","setLoading","saving","setSaving","error","setError","success","setSuccess","formErrors","setFormErrors","vaccines","setVaccines","vaccinatedStudents","setVaccinatedStudents","openStudentDialog","setOpenStudentDialog","availableStudents","setAvailableStudents","selectedStudents","setSelectedStudents","studentSearch","setStudentSearch","loadingStudents","setLoadingStudents","vaccinationErrors","setVaccinationErrors","formData","setFormData","vaccine","date","doses_available","applicable_grades","getMinDate","today","Date","minDate","setDate","getDate","toISOString","split","fetchData","vaccinesResponse","get","data","driveResponse","refreshVaccinatedStudents","console","vaccinationsResponse","params","drive_id","log","handleInputChange","e","name","value","target","validateForm","errors","parseInt","test","handleSubmit","preventDefault","Object","keys","length","put","response","post","setTimeout","Array","isArray","toString","getAlreadyVaccinatedStudents","vaccineId","allVaccinationsResponse","allVaccinations","vaccinationsWithSameVaccine","filter","v","vaccination_drive","map","student","handleOpenStudentDialog","minGrade","maxGrade","includes","grades","studentsResponse","alreadyVaccinatedIds","currentVaccinated","currentVaccinatedIds","eligibleStudents","studentGrade","grade","gradeInRange","notInCurrentDrive","notAlreadyVaccinated","_error$response","_error$response$data","detail","message","handleVaccinateStudents","s","currentVaccinations","currentCount","remainingDoses","successfulVaccinations","failedVaccinations","date_administered","push","errorMessage","JSON","stringify","some","handleStudentSearchChange","filterStudentsBySearch","fullName","first_name","last_name","toLowerCase","student_id","search","sx","display","justifyContent","alignItems","height","children","fileName","_jsxFileName","lineNumber","columnNumber","isPastDrive","filteredStudents","p","mb","startIcon","onClick","mr","variant","severity","onSubmit","container","spacing","item","xs","sm","fullWidth","onChange","label","disabled","color","type","required","InputLabelProps","shrink","helperText","inputProps","min","mt","record","student_name","toLocaleDateString","textAlign","open","onClose","maxWidth","style","margin","paddingLeft","index","placeholder","paragraph","py","flexWrap","gap","onDelete","size","component","colSpan","align","slice","isSelected","selected","hover","cursor","section","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/BITS PILANI/FSD/Assignment_1/React/frontend/src/components/drives/DriveForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Box, Typography, TextField, Button, Grid, Paper, CircularProgress,\r\n  FormControl, InputLabel, Select, MenuItem, Alert, Divider,\r\n  Table, TableBody, TableCell, TableContainer, TableHead, TableRow,\r\n  Autocomplete, Chip, Dialog, DialogActions, DialogContent, DialogTitle\r\n} from '@mui/material';\r\nimport { Save as SaveIcon, ArrowBack as ArrowBackIcon, PersonAdd as PersonAddIcon } from '@mui/icons-material';\r\n\r\nconst DriveForm = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const isEditMode = Boolean(id);\r\n  \r\n  const [loading, setLoading] = useState(isEditMode);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [formErrors, setFormErrors] = useState({});\r\n  \r\n  const [vaccines, setVaccines] = useState([]);\r\n  const [vaccinatedStudents, setVaccinatedStudents] = useState([]);\r\n  const [openStudentDialog, setOpenStudentDialog] = useState(false);\r\n  const [availableStudents, setAvailableStudents] = useState([]);\r\n  const [selectedStudents, setSelectedStudents] = useState([]);\r\n  const [studentSearch, setStudentSearch] = useState('');\r\n  const [loadingStudents, setLoadingStudents] = useState(false);\r\n  const [vaccinationErrors, setVaccinationErrors] = useState([]);\r\n  \r\n  const [formData, setFormData] = useState({\r\n    vaccine: '',\r\n    date: '',\r\n    doses_available: '',\r\n    applicable_grades: ''\r\n  });\r\n  \r\n  // Calculate minimum date (15 days from today)\r\n  const getMinDate = () => {\r\n    const today = new Date();\r\n    const minDate = new Date(today);\r\n    minDate.setDate(today.getDate() + 15);\r\n    return minDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD\r\n  };\r\n  \r\n  // Fetch drive data and vaccines\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Fetch vaccines\r\n        const vaccinesResponse = await axios.get('http://localhost:8000/api/vaccines/');\r\n        setVaccines(vaccinesResponse.data);\r\n        \r\n        if (isEditMode) {\r\n          // Fetch drive data\r\n          const driveResponse = await axios.get(`http://localhost:8000/api/drives/${id}/`);\r\n          setFormData({\r\n            vaccine: driveResponse.data.vaccine,\r\n            date: driveResponse.data.date,\r\n            doses_available: driveResponse.data.doses_available,\r\n            applicable_grades: driveResponse.data.applicable_grades\r\n          });\r\n          \r\n          // Fetch vaccinated students for this drive\r\n          await refreshVaccinatedStudents();\r\n        }\r\n        \r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        setError('Failed to load data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [id, isEditMode]);\r\n  \r\n  // Refresh the list of vaccinated students\r\n  const refreshVaccinatedStudents = async () => {\r\n    try {\r\n      const vaccinationsResponse = await axios.get('http://localhost:8000/api/vaccinations/', {\r\n        params: { drive_id: id }\r\n      });\r\n      console.log(\"Vaccinated students:\", vaccinationsResponse.data);\r\n      setVaccinatedStudents(vaccinationsResponse.data);\r\n      return vaccinationsResponse.data;\r\n    } catch (error) {\r\n      console.error('Error fetching vaccinated students:', error);\r\n      return [];\r\n    }\r\n  };\r\n  \r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value\r\n    });\r\n    \r\n    // Clear error for this field when user changes it\r\n    if (formErrors[name]) {\r\n      setFormErrors({\r\n        ...formErrors,\r\n        [name]: null\r\n      });\r\n    }\r\n  };\r\n  \r\n  const validateForm = () => {\r\n    const errors = {};\r\n    \r\n    if (!formData.vaccine) errors.vaccine = 'Vaccine is required';\r\n    if (!formData.date) errors.date = 'Date is required';\r\n    if (!formData.doses_available) errors.doses_available = 'Number of doses is required';\r\n    if (!formData.applicable_grades) errors.applicable_grades = 'Applicable grades is required';\r\n    \r\n    // Validate date is at least 15 days in the future\r\n    const minDate = getMinDate();\r\n    if (formData.date && formData.date < minDate) {\r\n      errors.date = `Date must be at least 15 days in the future (after ${minDate})`;\r\n    }\r\n    \r\n    // Check if doses is a positive number\r\n    if (formData.doses_available && parseInt(formData.doses_available, 10) <= 0) {\r\n      errors.doses_available = 'Number of doses must be positive';\r\n    }\r\n    \r\n    // Check if applicable grades has valid format\r\n    if (formData.applicable_grades && !/^[0-9]+(-[0-9]+)?$/.test(formData.applicable_grades)) {\r\n      errors.applicable_grades = 'Format should be like \"5\" or \"5-7\"';\r\n    }\r\n    \r\n    return errors;\r\n  };\r\n  \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setFormErrors({});\r\n    setSuccess('');\r\n    \r\n    // Validate form\r\n    const errors = validateForm();\r\n    if (Object.keys(errors).length > 0) {\r\n      setFormErrors(errors);\r\n      return;\r\n    }\r\n    \r\n    setSaving(true);\r\n    \r\n    try {\r\n      if (isEditMode) {\r\n        await axios.put(`http://localhost:8000/api/drives/${id}/`, formData);\r\n        setSuccess('Vaccination drive updated successfully');\r\n      } else {\r\n        const response = await axios.post('http://localhost:8000/api/drives/', formData);\r\n        setSuccess('Vaccination drive created successfully');\r\n        // Navigate to edit page for the newly created drive\r\n        setTimeout(() => {\r\n          navigate(`/drives/edit/${response.data.id}`);\r\n        }, 1500);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error saving drive:', error);\r\n      \r\n      if (error.response && error.response.data) {\r\n        // Handle field-specific errors\r\n        if (typeof error.response.data === 'object') {\r\n          if (error.response.data.date) {\r\n            // Handle date validation error\r\n            setFormErrors({\r\n              ...formErrors,\r\n              date: Array.isArray(error.response.data.date) \r\n                ? error.response.data.date[0] \r\n                : error.response.data.date\r\n            });\r\n          } else {\r\n            // Handle other field errors\r\n            setFormErrors(error.response.data);\r\n          }\r\n        } else {\r\n          // Generic error\r\n          setError(error.response.data.toString() || 'Failed to save vaccination drive');\r\n        }\r\n      } else {\r\n        setError('Failed to save vaccination drive. Please try again.');\r\n      }\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n  \r\n  // Custom function to check if student is already vaccinated with this vaccine\r\n  const getAlreadyVaccinatedStudents = async () => {\r\n    try {\r\n      // Get the current vaccine ID from the drive\r\n      const vaccineId = formData.vaccine;\r\n      if (!vaccineId) return [];\r\n      \r\n      // Get all vaccinations for all students\r\n      const allVaccinationsResponse = await axios.get('http://localhost:8000/api/vaccinations/');\r\n      const allVaccinations = allVaccinationsResponse.data;\r\n      \r\n      // Filter vaccinations for the current vaccine\r\n      const vaccinationsWithSameVaccine = allVaccinations.filter(v => {\r\n        // Need to check if vaccination_drive contains the same vaccine\r\n        return v.vaccination_drive && v.vaccination_drive.vaccine === parseInt(vaccineId);\r\n      });\r\n      \r\n      // Extract student IDs\r\n      return vaccinationsWithSameVaccine.map(v => v.student);\r\n    } catch (error) {\r\n      console.error('Error checking vaccinated students:', error);\r\n      return [];\r\n    }\r\n  };\r\n  \r\n  const handleOpenStudentDialog = async () => {\r\n    try {\r\n      setError('');\r\n      setVaccinationErrors([]);\r\n      setLoadingStudents(true);\r\n      \r\n      // Ensure we have grade values to use\r\n      if (!formData.applicable_grades) {\r\n        setError('Please specify applicable grades before adding students');\r\n        setLoadingStudents(false);\r\n        return;\r\n      }\r\n      \r\n      // Parse the grade range\r\n      let minGrade, maxGrade;\r\n      if (formData.applicable_grades.includes('-')) {\r\n        const grades = formData.applicable_grades.split('-');\r\n        minGrade = parseInt(grades[0], 10);\r\n        maxGrade = parseInt(grades[1], 10);\r\n      } else {\r\n        minGrade = maxGrade = parseInt(formData.applicable_grades, 10);\r\n      }\r\n      \r\n      console.log(`Fetching students for grades ${minGrade} to ${maxGrade}`);\r\n      \r\n      // Fetch all students\r\n      const studentsResponse = await axios.get('http://localhost:8000/api/students/');\r\n      console.log(\"All students:\", studentsResponse.data);\r\n      \r\n      // Get students already vaccinated with this vaccine\r\n      const alreadyVaccinatedIds = await getAlreadyVaccinatedStudents();\r\n      console.log(\"Already vaccinated with this vaccine:\", alreadyVaccinatedIds);\r\n      \r\n      // Fetch current vaccinated students in this drive to exclude them\r\n      const currentVaccinated = await refreshVaccinatedStudents();\r\n      const currentVaccinatedIds = currentVaccinated.map(v => v.student);\r\n      \r\n      // Filter eligible students\r\n      const eligibleStudents = studentsResponse.data.filter(student => {\r\n        const studentGrade = parseInt(student.grade, 10);\r\n        // Check grade in range\r\n        const gradeInRange = studentGrade >= minGrade && studentGrade <= maxGrade;\r\n        // Check not already vaccinated in this drive\r\n        const notInCurrentDrive = !currentVaccinatedIds.includes(student.id);\r\n        // Check not already vaccinated with this vaccine in any drive\r\n        const notAlreadyVaccinated = !alreadyVaccinatedIds.includes(student.id);\r\n        \r\n        return gradeInRange && notInCurrentDrive && notAlreadyVaccinated;\r\n      });\r\n      \r\n      console.log(\"Eligible students:\", eligibleStudents);\r\n      setAvailableStudents(eligibleStudents);\r\n      setOpenStudentDialog(true);\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching available students:', error);\r\n      setError('Failed to load available students: ' + (error.response?.data?.detail || error.message));\r\n    } finally {\r\n      setLoadingStudents(false);\r\n    }\r\n  };\r\n  \r\n  const handleVaccinateStudents = async () => {\r\n    if (selectedStudents.length === 0) {\r\n      setError('Please select at least one student');\r\n      return;\r\n    }\r\n    \r\n    setError('');\r\n    setSuccess('');\r\n    setVaccinationErrors([]);\r\n    setSaving(true);\r\n    \r\n    try {\r\n      console.log(\"Attempting to vaccinate students:\", selectedStudents.map(s => s.id));\r\n      \r\n      // Check if we have enough doses left\r\n      const currentVaccinations = await refreshVaccinatedStudents();\r\n      const currentCount = currentVaccinations.length;\r\n      const remainingDoses = formData.doses_available - currentCount;\r\n      \r\n      if (selectedStudents.length > remainingDoses) {\r\n        setError(`Cannot add ${selectedStudents.length} students. Only ${remainingDoses} doses available.`);\r\n        setSaving(false);\r\n        return;\r\n      }\r\n      \r\n      // Track successful and failed vaccinations\r\n      const successfulVaccinations = [];\r\n      const failedVaccinations = [];\r\n      \r\n      // Process each student one by one to handle individual errors\r\n      for (const student of selectedStudents) {\r\n        try {\r\n          await axios.post('http://localhost:8000/api/vaccinations/', {\r\n            student: student.id,\r\n            vaccination_drive: id,\r\n            date_administered: new Date().toISOString().split('T')[0]\r\n          });\r\n          \r\n          successfulVaccinations.push(student);\r\n        } catch (error) {\r\n          console.error(`Error vaccinating student ${student.id}:`, error);\r\n          \r\n          // Extract error message\r\n          let errorMessage = 'Unknown error';\r\n          if (error.response && error.response.data) {\r\n            if (Array.isArray(error.response.data)) {\r\n              errorMessage = error.response.data[0];\r\n            } else if (typeof error.response.data === 'string') {\r\n              errorMessage = error.response.data;\r\n            } else {\r\n              errorMessage = JSON.stringify(error.response.data);\r\n            }\r\n          }\r\n          \r\n          failedVaccinations.push({\r\n            student: student,\r\n            error: errorMessage\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Refresh vaccinated students list\r\n      await refreshVaccinatedStudents();\r\n      \r\n      // Set success or error messages\r\n      if (successfulVaccinations.length > 0) {\r\n        setSuccess(`Successfully vaccinated ${successfulVaccinations.length} students`);\r\n      }\r\n      \r\n      if (failedVaccinations.length > 0) {\r\n        setVaccinationErrors(failedVaccinations);\r\n        if (successfulVaccinations.length === 0) {\r\n          setError(`Failed to vaccinate any students. See details below.`);\r\n        }\r\n      }\r\n      \r\n      // Close dialog if all operations were successful\r\n      if (failedVaccinations.length === 0) {\r\n        setOpenStudentDialog(false);\r\n      }\r\n      \r\n      // Remove successfully vaccinated students from selection\r\n      setSelectedStudents(selectedStudents.filter(student => \r\n        !successfulVaccinations.some(s => s.id === student.id)\r\n      ));\r\n      \r\n    } catch (error) {\r\n      console.error('Error during vaccination process:', error);\r\n      setError('An unexpected error occurred: ' + (error.message || 'Unknown error'));\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n  \r\n  const handleStudentSearchChange = (e, value) => {\r\n    setStudentSearch(e.target.value);\r\n  };\r\n  \r\n  const filterStudentsBySearch = () => {\r\n    if (!studentSearch || studentSearch.length < 2) return availableStudents;\r\n    \r\n    return availableStudents.filter(student => {\r\n      const fullName = `${student.first_name} ${student.last_name}`.toLowerCase();\r\n      const id = student.student_id.toLowerCase();\r\n      const search = studentSearch.toLowerCase();\r\n      \r\n      return fullName.includes(search) || id.includes(search);\r\n    });\r\n  };\r\n  \r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  const isPastDrive = isEditMode && new Date(formData.date) < new Date();\r\n  const filteredStudents = filterStudentsBySearch();\r\n  \r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n        <Button\r\n          startIcon={<ArrowBackIcon />}\r\n          onClick={() => navigate('/drives')}\r\n          sx={{ mr: 2 }}\r\n        >\r\n          Back\r\n        </Button>\r\n        <Typography variant=\"h4\">\r\n          {isEditMode ? 'Edit Vaccination Drive' : 'Create Vaccination Drive'}\r\n        </Typography>\r\n      </Box>\r\n      \r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" sx={{ mb: 2 }}>{success}</Alert>\r\n      )}\r\n      \r\n      {isPastDrive && (\r\n        <Alert severity=\"warning\" sx={{ mb: 2 }}>\r\n          This drive is in the past and cannot be edited.\r\n        </Alert>\r\n      )}\r\n      \r\n      <Paper sx={{ p: 3, mb: 4 }}>\r\n        <form onSubmit={handleSubmit}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <FormControl fullWidth error={!!formErrors.vaccine}>\r\n                <InputLabel>Vaccine</InputLabel>\r\n                <Select\r\n                  name=\"vaccine\"\r\n                  value={formData.vaccine}\r\n                  onChange={handleInputChange}\r\n                  label=\"Vaccine\"\r\n                  disabled={isPastDrive || isEditMode} // Don't allow changing vaccine for existing drives\r\n                >\r\n                  <MenuItem value=\"\" disabled>Select a vaccine</MenuItem>\r\n                  {vaccines.map((vaccine) => (\r\n                    <MenuItem key={vaccine.id} value={vaccine.id}>\r\n                      {vaccine.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {formErrors.vaccine && (\r\n                  <Typography variant=\"caption\" color=\"error\">\r\n                    {formErrors.vaccine}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                name=\"date\"\r\n                label=\"Drive Date\"\r\n                type=\"date\"\r\n                value={formData.date}\r\n                onChange={handleInputChange}\r\n                fullWidth\r\n                required\r\n                InputLabelProps={{ shrink: true }}\r\n                disabled={isPastDrive}\r\n                error={!!formErrors.date}\r\n                helperText={formErrors.date || `Must be after ${getMinDate()} (15 days from today)`}\r\n                inputProps={{ min: getMinDate() }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                name=\"doses_available\"\r\n                label=\"Available Doses\"\r\n                type=\"number\"\r\n                value={formData.doses_available}\r\n                onChange={handleInputChange}\r\n                fullWidth\r\n                required\r\n                disabled={isPastDrive}\r\n                error={!!formErrors.doses_available}\r\n                helperText={formErrors.doses_available}\r\n                inputProps={{ min: 1 }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                name=\"applicable_grades\"\r\n                label=\"Applicable Grades\"\r\n                value={formData.applicable_grades}\r\n                onChange={handleInputChange}\r\n                fullWidth\r\n                required\r\n                disabled={isPastDrive}\r\n                error={!!formErrors.applicable_grades}\r\n                helperText={formErrors.applicable_grades || \"E.g., '5-7' for grades 5 to 7, or '5' for just grade 5\"}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<SaveIcon />}\r\n                disabled={saving || isPastDrive}\r\n                sx={{ mt: 2 }}\r\n              >\r\n                {saving ? 'Saving...' : (isEditMode ? 'Update Drive' : 'Create Drive')}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n      \r\n      {/* Vaccinated Students List (only in Edit mode) */}\r\n      {isEditMode && (\r\n        <Box sx={{ mt: 4 }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n            <Typography variant=\"h5\">\r\n              Vaccinated Students\r\n            </Typography>\r\n            \r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              startIcon={<PersonAddIcon />}\r\n              onClick={handleOpenStudentDialog}\r\n              disabled={isPastDrive || loadingStudents}\r\n            >\r\n              {loadingStudents ? 'Loading...' : 'Add Students'}\r\n            </Button>\r\n          </Box>\r\n          \r\n          <Paper sx={{ p: 3 }}>\r\n            {vaccinatedStudents.length === 0 ? (\r\n              <Typography>No students have been vaccinated in this drive yet.</Typography>\r\n            ) : (\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Student ID</TableCell>\r\n                      <TableCell>Name</TableCell>\r\n                      <TableCell>Date Administered</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {vaccinatedStudents.map((record) => (\r\n                      <TableRow key={record.id}>\r\n                        <TableCell>{record.student_id}</TableCell>\r\n                        <TableCell>{record.student_name}</TableCell>\r\n                        <TableCell>{new Date(record.date_administered).toLocaleDateString()}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n                <Box sx={{ mt: 2, textAlign: 'right' }}>\r\n                  <Typography variant=\"body2\">\r\n                    {vaccinatedStudents.length} of {formData.doses_available} doses used\r\n                  </Typography>\r\n                </Box>\r\n              </TableContainer>\r\n            )}\r\n          </Paper>\r\n        </Box>\r\n      )}\r\n      \r\n      {/* Dialog for adding students to the vaccination drive */}\r\n      <Dialog \r\n        open={openStudentDialog} \r\n        onClose={() => !saving && setOpenStudentDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Add Students to Vaccination Drive</DialogTitle>\r\n        <DialogContent>\r\n          {vaccinationErrors.length > 0 && (\r\n            <Alert severity=\"warning\" sx={{ mb: 2 }}>\r\n              Some students could not be vaccinated:\r\n              <ul style={{ margin: '8px 0 0 0', paddingLeft: '24px' }}>\r\n                {vaccinationErrors.map((error, index) => (\r\n                  <li key={index}>\r\n                    {error.student.first_name} {error.student.last_name}: {error.error}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </Alert>\r\n          )}\r\n          \r\n          <Box sx={{ mb: 3, mt: 1 }}>\r\n            <TextField\r\n              label=\"Search Students\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              value={studentSearch}\r\n              onChange={handleStudentSearchChange}\r\n              placeholder=\"Type to search by name or ID...\"\r\n            />\r\n          </Box>\r\n          \r\n          <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n            Showing students in applicable grades who haven't received this vaccine yet.\r\n          </Typography>\r\n          \r\n          {availableStudents.length === 0 && (\r\n            <Typography variant=\"body1\" sx={{ textAlign: 'center', py: 2 }}>\r\n              No eligible students found. All students in the applicable grades may already be vaccinated with this vaccine.\r\n            </Typography>\r\n          )}\r\n          \r\n          {availableStudents.length > 0 && (\r\n            <Box>\r\n              <Box sx={{ mb: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                {selectedStudents.map((student) => (\r\n                  <Chip\r\n                    key={student.id}\r\n                    label={`${student.first_name} ${student.last_name}`}\r\n                    onDelete={() => setSelectedStudents(selectedStudents.filter(s => s.id !== student.id))}\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                  />\r\n                ))}\r\n              </Box>\r\n              \r\n              <TableContainer component={Paper} variant=\"outlined\">\r\n                <Table size=\"small\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Student ID</TableCell>\r\n                      <TableCell>Name</TableCell>\r\n                      <TableCell>Grade</TableCell>\r\n                      <TableCell>Section</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {filteredStudents.length === 0 ? (\r\n                      <TableRow>\r\n                        <TableCell colSpan={4} align=\"center\">\r\n                          No students match your search criteria\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ) : (\r\n                      filteredStudents.slice(0, 10).map((student) => {\r\n                        const isSelected = selectedStudents.some(s => s.id === student.id);\r\n                        \r\n                        return (\r\n                          <TableRow \r\n                            key={student.id}\r\n                            selected={isSelected}\r\n                            hover\r\n                            onClick={() => {\r\n                              if (isSelected) {\r\n                                setSelectedStudents(selectedStudents.filter(s => s.id !== student.id));\r\n                              } else {\r\n                                setSelectedStudents([...selectedStudents, student]);\r\n                              }\r\n                            }}\r\n                            sx={{ cursor: 'pointer' }}\r\n                          >\r\n                            <TableCell>{student.student_id}</TableCell>\r\n                            <TableCell>{`${student.first_name} ${student.last_name}`}</TableCell>\r\n                            <TableCell>{student.grade}</TableCell>\r\n                            <TableCell>{student.section}</TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })\r\n                    )}\r\n                    {filteredStudents.length > 10 && (\r\n                      <TableRow>\r\n                        <TableCell colSpan={4} align=\"center\">\r\n                          {filteredStudents.length - 10} more students available. Refine your search to see more.\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenStudentDialog(false)} disabled={saving}>Cancel</Button>\r\n          <Button \r\n            onClick={handleVaccinateStudents} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={selectedStudents.length === 0 || saving}\r\n          >\r\n            {saving ? 'Processing...' : `Add Selected Students (${selectedStudents.length})`}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default DriveForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}