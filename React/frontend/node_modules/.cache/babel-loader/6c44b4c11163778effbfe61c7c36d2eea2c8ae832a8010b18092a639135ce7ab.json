{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\BITS PILANI\\\\FSD\\\\Assignment_1\\\\React\\\\frontend\\\\src\\\\components\\\\drives\\\\DriveForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { Box, Typography, TextField, Button, Grid, Paper, CircularProgress, FormControl, InputLabel, Select, MenuItem, Alert, Divider, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Autocomplete, Chip, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\nimport { Save as SaveIcon, ArrowBack as ArrowBackIcon, PersonAdd as PersonAddIcon } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DriveForm = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const isEditMode = Boolean(id);\n  const [loading, setLoading] = useState(isEditMode);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [formErrors, setFormErrors] = useState({});\n  const [vaccines, setVaccines] = useState([]);\n  const [vaccinatedStudents, setVaccinatedStudents] = useState([]);\n  const [openStudentDialog, setOpenStudentDialog] = useState(false);\n  const [availableStudents, setAvailableStudents] = useState([]);\n  const [selectedStudents, setSelectedStudents] = useState([]);\n  const [studentSearch, setStudentSearch] = useState('');\n  const [loadingStudents, setLoadingStudents] = useState(false);\n  const [formData, setFormData] = useState({\n    vaccine: '',\n    date: '',\n    doses_available: '',\n    applicable_grades: ''\n  });\n\n  // Calculate minimum date (15 days from today)\n  const getMinDate = () => {\n    const today = new Date();\n    const minDate = new Date(today);\n    minDate.setDate(today.getDate() + 15);\n    return minDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n  };\n\n  // Fetch drive data and vaccines\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch vaccines\n        const vaccinesResponse = await axios.get('http://localhost:8000/api/vaccines/');\n        setVaccines(vaccinesResponse.data);\n        if (isEditMode) {\n          // Fetch drive data\n          const driveResponse = await axios.get(`http://localhost:8000/api/drives/${id}/`);\n          setFormData({\n            vaccine: driveResponse.data.vaccine,\n            date: driveResponse.data.date,\n            doses_available: driveResponse.data.doses_available,\n            applicable_grades: driveResponse.data.applicable_grades\n          });\n\n          // Fetch vaccinated students for this drive\n          await refreshVaccinatedStudents();\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Failed to load data');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [id, isEditMode]);\n\n  // Refresh the list of vaccinated students\n  const refreshVaccinatedStudents = async () => {\n    try {\n      const vaccinationsResponse = await axios.get('http://localhost:8000/api/vaccinations/', {\n        params: {\n          drive_id: id\n        }\n      });\n      console.log(\"Vaccinated students:\", vaccinationsResponse.data);\n      setVaccinatedStudents(vaccinationsResponse.data);\n      return vaccinationsResponse.data;\n    } catch (error) {\n      console.error('Error fetching vaccinated students:', error);\n      return [];\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n\n    // Clear error for this field when user changes it\n    if (formErrors[name]) {\n      setFormErrors({\n        ...formErrors,\n        [name]: null\n      });\n    }\n  };\n  const validateForm = () => {\n    const errors = {};\n    if (!formData.vaccine) errors.vaccine = 'Vaccine is required';\n    if (!formData.date) errors.date = 'Date is required';\n    if (!formData.doses_available) errors.doses_available = 'Number of doses is required';\n    if (!formData.applicable_grades) errors.applicable_grades = 'Applicable grades is required';\n\n    // Validate date is at least 15 days in the future\n    const minDate = getMinDate();\n    if (formData.date && formData.date < minDate) {\n      errors.date = `Date must be at least 15 days in the future (after ${minDate})`;\n    }\n\n    // Check if doses is a positive number\n    if (formData.doses_available && parseInt(formData.doses_available, 10) <= 0) {\n      errors.doses_available = 'Number of doses must be positive';\n    }\n\n    // Check if applicable grades has valid format\n    if (formData.applicable_grades && !/^[0-9]+(-[0-9]+)?$/.test(formData.applicable_grades)) {\n      errors.applicable_grades = 'Format should be like \"5\" or \"5-7\"';\n    }\n    return errors;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setFormErrors({});\n    setSuccess('');\n\n    // Validate form\n    const errors = validateForm();\n    if (Object.keys(errors).length > 0) {\n      setFormErrors(errors);\n      return;\n    }\n    setSaving(true);\n    try {\n      if (isEditMode) {\n        await axios.put(`http://localhost:8000/api/drives/${id}/`, formData);\n        setSuccess('Vaccination drive updated successfully');\n      } else {\n        const response = await axios.post('http://localhost:8000/api/drives/', formData);\n        setSuccess('Vaccination drive created successfully');\n        // Navigate to edit page for the newly created drive\n        setTimeout(() => {\n          navigate(`/drives/edit/${response.data.id}`);\n        }, 1500);\n      }\n    } catch (error) {\n      console.error('Error saving drive:', error);\n      if (error.response && error.response.data) {\n        // Handle field-specific errors\n        if (typeof error.response.data === 'object') {\n          if (error.response.data.date) {\n            // Handle date validation error\n            setFormErrors({\n              ...formErrors,\n              date: Array.isArray(error.response.data.date) ? error.response.data.date[0] : error.response.data.date\n            });\n          } else {\n            // Handle other field errors\n            setFormErrors(error.response.data);\n          }\n        } else {\n          // Generic error\n          setError(error.response.data.toString() || 'Failed to save vaccination drive');\n        }\n      } else {\n        setError('Failed to save vaccination drive. Please try again.');\n      }\n    } finally {\n      setSaving(false);\n    }\n  };\n  const handleOpenStudentDialog = async () => {\n    try {\n      setError('');\n      setLoadingStudents(true);\n\n      // Ensure we have grade values to use\n      if (!formData.applicable_grades) {\n        setError('Please specify applicable grades before adding students');\n        setLoadingStudents(false);\n        return;\n      }\n\n      // Get students that can be vaccinated (not already vaccinated with this vaccine)\n      // Parse the grade range\n      let minGrade, maxGrade;\n      if (formData.applicable_grades.includes('-')) {\n        const grades = formData.applicable_grades.split('-');\n        minGrade = parseInt(grades[0], 10);\n        maxGrade = parseInt(grades[1], 10);\n      } else {\n        minGrade = maxGrade = parseInt(formData.applicable_grades, 10);\n      }\n      console.log(`Fetching students for grades ${minGrade} to ${maxGrade}`);\n\n      // Fetch all students\n      const studentsResponse = await axios.get('http://localhost:8000/api/students/');\n      console.log(\"All students:\", studentsResponse.data);\n\n      // Fetch current vaccinated students to exclude them\n      const currentVaccinated = await refreshVaccinatedStudents();\n      const vaccinatedIds = currentVaccinated.map(v => v.student);\n\n      // Filter eligible students\n      const eligibleStudents = studentsResponse.data.filter(student => {\n        const studentGrade = parseInt(student.grade, 10);\n        // Check grade in range\n        const gradeInRange = studentGrade >= minGrade && studentGrade <= maxGrade;\n        // Check not already vaccinated\n        const notVaccinated = !vaccinatedIds.includes(student.id);\n        return gradeInRange && notVaccinated;\n      });\n      console.log(\"Eligible students:\", eligibleStudents);\n      setAvailableStudents(eligibleStudents);\n      setOpenStudentDialog(true);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error fetching available students:', error);\n      setError('Failed to load available students: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message));\n    } finally {\n      setLoadingStudents(false);\n    }\n  };\n  const handleVaccinateStudents = async () => {\n    if (selectedStudents.length === 0) {\n      setError('Please select at least one student');\n      return;\n    }\n    setError('');\n    setSuccess('');\n    setSaving(true);\n    try {\n      console.log(\"Sending student IDs:\", selectedStudents.map(s => s.id));\n\n      // Check if we have enough doses left\n      const currentVaccinations = await refreshVaccinatedStudents();\n      const currentCount = currentVaccinations.length;\n      const remainingDoses = formData.doses_available - currentCount;\n      if (selectedStudents.length > remainingDoses) {\n        setError(`Cannot add ${selectedStudents.length} students. Only ${remainingDoses} doses available.`);\n        setSaving(false);\n        return;\n      }\n\n      // Create vaccinations directly\n      const vaccinationPromises = selectedStudents.map(student => axios.post('http://localhost:8000/api/vaccinations/', {\n        student: student.id,\n        vaccination_drive: id,\n        date_administered: new Date().toISOString().split('T')[0]\n      }));\n      await Promise.all(vaccinationPromises);\n\n      // Refresh vaccinated students list\n      await refreshVaccinatedStudents();\n      setSuccess(`Successfully vaccinated ${selectedStudents.length} students`);\n\n      // Close dialog and reset selection\n      setOpenStudentDialog(false);\n      setSelectedStudents([]);\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error vaccinating students:', error);\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Failed to vaccinate students: ' + error.message);\n    } finally {\n      setSaving(false);\n    }\n  };\n  const handleStudentSearchChange = (e, value) => {\n    setStudentSearch(value);\n  };\n  const filterStudentsBySearch = () => {\n    if (!studentSearch || studentSearch.length < 2) return availableStudents;\n    return availableStudents.filter(student => {\n      const fullName = `${student.first_name} ${student.last_name}`.toLowerCase();\n      const id = student.student_id.toLowerCase();\n      const search = studentSearch.toLowerCase();\n      return fullName.includes(search) || id.includes(search);\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '50vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this);\n  }\n  const isPastDrive = isEditMode && new Date(formData.date) < new Date();\n  const filteredStudents = filterStudentsBySearch();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 22\n        }, this),\n        onClick: () => navigate('/drives'),\n        sx: {\n          mr: 2\n        },\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: isEditMode ? 'Edit Vaccination Drive' : 'Create Vaccination Drive'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 2\n      },\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }, this), isPastDrive && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"warning\",\n      sx: {\n        mb: 2\n      },\n      children: \"This drive is in the past and cannot be edited.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              error: !!formErrors.vaccine,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                children: \"Vaccine\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                name: \"vaccine\",\n                value: formData.vaccine,\n                onChange: handleInputChange,\n                label: \"Vaccine\",\n                disabled: isPastDrive || isEditMode // Don't allow changing vaccine for existing drives\n                ,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  disabled: true,\n                  children: \"Select a vaccine\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 19\n                }, this), vaccines.map(vaccine => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: vaccine.id,\n                  children: vaccine.name\n                }, vaccine.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 374,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 17\n              }, this), formErrors.vaccine && /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"caption\",\n                color: \"error\",\n                children: formErrors.vaccine\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"date\",\n              label: \"Drive Date\",\n              type: \"date\",\n              value: formData.date,\n              onChange: handleInputChange,\n              fullWidth: true,\n              required: true,\n              InputLabelProps: {\n                shrink: true\n              },\n              disabled: isPastDrive,\n              error: !!formErrors.date,\n              helperText: formErrors.date || `Must be after ${getMinDate()} (15 days from today)`,\n              inputProps: {\n                min: getMinDate()\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"doses_available\",\n              label: \"Available Doses\",\n              type: \"number\",\n              value: formData.doses_available,\n              onChange: handleInputChange,\n              fullWidth: true,\n              required: true,\n              disabled: isPastDrive,\n              error: !!formErrors.doses_available,\n              helperText: formErrors.doses_available,\n              inputProps: {\n                min: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"applicable_grades\",\n              label: \"Applicable Grades\",\n              value: formData.applicable_grades,\n              onChange: handleInputChange,\n              fullWidth: true,\n              required: true,\n              disabled: isPastDrive,\n              error: !!formErrors.applicable_grades,\n              helperText: formErrors.applicable_grades || \"E.g., '5-7' for grades 5 to 7, or '5' for just grade 5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 28\n              }, this),\n              disabled: saving || isPastDrive,\n              sx: {\n                mt: 2\n              },\n              children: saving ? 'Saving...' : isEditMode ? 'Update Drive' : 'Create Drive'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this), isEditMode && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: \"Vaccinated Students\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          startIcon: /*#__PURE__*/_jsxDEV(PersonAddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 26\n          }, this),\n          onClick: handleOpenStudentDialog,\n          disabled: isPastDrive || loadingStudents,\n          children: loadingStudents ? 'Loading...' : 'Add Students'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          p: 3\n        },\n        children: vaccinatedStudents.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"No students have been vaccinated in this drive yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(TableContainer, {\n          children: [/*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Student ID\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 474,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 475,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Date Administered\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 476,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: vaccinatedStudents.map(record => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: record.student_id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 482,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: record.student_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 483,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: new Date(record.date_administered).toLocaleDateString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 484,\n                  columnNumber: 25\n                }, this)]\n              }, record.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2,\n              textAlign: 'right'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [vaccinatedStudents.length, \" of \", formData.doses_available, \" doses used\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openStudentDialog,\n      onClose: () => !saving && setOpenStudentDialog(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Add Students to Vaccination Drive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 3,\n            mt: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Search Students\",\n            variant: \"outlined\",\n            fullWidth: true,\n            value: studentSearch,\n            onChange: e => setStudentSearch(e.target.value),\n            placeholder: \"Type to search by name or ID...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          paragraph: true,\n          children: \"Showing students in applicable grades who haven't received this vaccine yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this), availableStudents.length === 0 && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            textAlign: 'center',\n            py: 2\n          },\n          children: \"No eligible students found. All students in the applicable grades may already be vaccinated.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 13\n        }, this), availableStudents.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2,\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 1\n            },\n            children: selectedStudents.map(student => /*#__PURE__*/_jsxDEV(Chip, {\n              label: `${student.first_name} ${student.last_name}`,\n              onDelete: () => setSelectedStudents(selectedStudents.filter(s => s.id !== student.id)),\n              color: \"primary\",\n              size: \"small\"\n            }, student.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n            component: Paper,\n            variant: \"outlined\",\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              size: \"small\",\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Student ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 548,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 549,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Grade\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 550,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Section\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 551,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 547,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 546,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: [filteredStudents.length === 0 ? /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    colSpan: 4,\n                    align: \"center\",\n                    children: \"No students match your search criteria\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 557,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 556,\n                  columnNumber: 23\n                }, this) : filteredStudents.slice(0, 10).map(student => {\n                  const isSelected = selectedStudents.some(s => s.id === student.id);\n                  return /*#__PURE__*/_jsxDEV(TableRow, {\n                    selected: isSelected,\n                    hover: true,\n                    onClick: () => {\n                      if (isSelected) {\n                        setSelectedStudents(selectedStudents.filter(s => s.id !== student.id));\n                      } else {\n                        setSelectedStudents([...selectedStudents, student]);\n                      }\n                    },\n                    sx: {\n                      cursor: 'pointer'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                      children: student.student_id\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 579,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: `${student.first_name} ${student.last_name}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 580,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: student.grade\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 581,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: student.section\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 582,\n                      columnNumber: 29\n                    }, this)]\n                  }, student.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 566,\n                    columnNumber: 27\n                  }, this);\n                }), filteredStudents.length > 10 && /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    colSpan: 4,\n                    align: \"center\",\n                    children: [filteredStudents.length - 10, \" more students available. Refine your search to see more.\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 589,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 588,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpenStudentDialog(false),\n          disabled: saving,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleVaccinateStudents,\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: selectedStudents.length === 0 || saving,\n          children: saving ? 'Processing...' : `Add Selected Students (${selectedStudents.length})`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 5\n  }, this);\n};\n_s(DriveForm, \"Nse7WCVeTWg/VtzbCsd5hFSOo4U=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = DriveForm;\nexport default DriveForm;\nvar _c;\n$RefreshReg$(_c, \"DriveForm\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","Box","Typography","TextField","Button","Grid","Paper","CircularProgress","FormControl","InputLabel","Select","MenuItem","Alert","Divider","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Autocomplete","Chip","Dialog","DialogActions","DialogContent","DialogTitle","Save","SaveIcon","ArrowBack","ArrowBackIcon","PersonAdd","PersonAddIcon","jsxDEV","_jsxDEV","DriveForm","_s","id","navigate","isEditMode","Boolean","loading","setLoading","saving","setSaving","error","setError","success","setSuccess","formErrors","setFormErrors","vaccines","setVaccines","vaccinatedStudents","setVaccinatedStudents","openStudentDialog","setOpenStudentDialog","availableStudents","setAvailableStudents","selectedStudents","setSelectedStudents","studentSearch","setStudentSearch","loadingStudents","setLoadingStudents","formData","setFormData","vaccine","date","doses_available","applicable_grades","getMinDate","today","Date","minDate","setDate","getDate","toISOString","split","fetchData","vaccinesResponse","get","data","driveResponse","refreshVaccinatedStudents","console","vaccinationsResponse","params","drive_id","log","handleInputChange","e","name","value","target","validateForm","errors","parseInt","test","handleSubmit","preventDefault","Object","keys","length","put","response","post","setTimeout","Array","isArray","toString","handleOpenStudentDialog","minGrade","maxGrade","includes","grades","studentsResponse","currentVaccinated","vaccinatedIds","map","v","student","eligibleStudents","filter","studentGrade","grade","gradeInRange","notVaccinated","_error$response","_error$response$data","detail","message","handleVaccinateStudents","s","currentVaccinations","currentCount","remainingDoses","vaccinationPromises","vaccination_drive","date_administered","Promise","all","_error$response2","_error$response2$data","handleStudentSearchChange","filterStudentsBySearch","fullName","first_name","last_name","toLowerCase","student_id","search","sx","display","justifyContent","alignItems","height","children","fileName","_jsxFileName","lineNumber","columnNumber","isPastDrive","filteredStudents","p","mb","startIcon","onClick","mr","variant","severity","onSubmit","container","spacing","item","xs","sm","fullWidth","onChange","label","disabled","color","type","required","InputLabelProps","shrink","helperText","inputProps","min","mt","record","student_name","toLocaleDateString","textAlign","open","onClose","maxWidth","placeholder","paragraph","py","flexWrap","gap","onDelete","size","component","colSpan","align","slice","isSelected","some","selected","hover","cursor","section","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/BITS PILANI/FSD/Assignment_1/React/frontend/src/components/drives/DriveForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Box, Typography, TextField, Button, Grid, Paper, CircularProgress,\r\n  FormControl, InputLabel, Select, MenuItem, Alert, Divider,\r\n  Table, TableBody, TableCell, TableContainer, TableHead, TableRow,\r\n  Autocomplete, Chip, Dialog, DialogActions, DialogContent, DialogTitle\r\n} from '@mui/material';\r\nimport { Save as SaveIcon, ArrowBack as ArrowBackIcon, PersonAdd as PersonAddIcon } from '@mui/icons-material';\r\n\r\nconst DriveForm = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const isEditMode = Boolean(id);\r\n  \r\n  const [loading, setLoading] = useState(isEditMode);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [formErrors, setFormErrors] = useState({});\r\n  \r\n  const [vaccines, setVaccines] = useState([]);\r\n  const [vaccinatedStudents, setVaccinatedStudents] = useState([]);\r\n  const [openStudentDialog, setOpenStudentDialog] = useState(false);\r\n  const [availableStudents, setAvailableStudents] = useState([]);\r\n  const [selectedStudents, setSelectedStudents] = useState([]);\r\n  const [studentSearch, setStudentSearch] = useState('');\r\n  const [loadingStudents, setLoadingStudents] = useState(false);\r\n  \r\n  const [formData, setFormData] = useState({\r\n    vaccine: '',\r\n    date: '',\r\n    doses_available: '',\r\n    applicable_grades: ''\r\n  });\r\n  \r\n  // Calculate minimum date (15 days from today)\r\n  const getMinDate = () => {\r\n    const today = new Date();\r\n    const minDate = new Date(today);\r\n    minDate.setDate(today.getDate() + 15);\r\n    return minDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD\r\n  };\r\n  \r\n  // Fetch drive data and vaccines\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Fetch vaccines\r\n        const vaccinesResponse = await axios.get('http://localhost:8000/api/vaccines/');\r\n        setVaccines(vaccinesResponse.data);\r\n        \r\n        if (isEditMode) {\r\n          // Fetch drive data\r\n          const driveResponse = await axios.get(`http://localhost:8000/api/drives/${id}/`);\r\n          setFormData({\r\n            vaccine: driveResponse.data.vaccine,\r\n            date: driveResponse.data.date,\r\n            doses_available: driveResponse.data.doses_available,\r\n            applicable_grades: driveResponse.data.applicable_grades\r\n          });\r\n          \r\n          // Fetch vaccinated students for this drive\r\n          await refreshVaccinatedStudents();\r\n        }\r\n        \r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        setError('Failed to load data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [id, isEditMode]);\r\n  \r\n  // Refresh the list of vaccinated students\r\n  const refreshVaccinatedStudents = async () => {\r\n    try {\r\n      const vaccinationsResponse = await axios.get('http://localhost:8000/api/vaccinations/', {\r\n        params: { drive_id: id }\r\n      });\r\n      console.log(\"Vaccinated students:\", vaccinationsResponse.data);\r\n      setVaccinatedStudents(vaccinationsResponse.data);\r\n      return vaccinationsResponse.data;\r\n    } catch (error) {\r\n      console.error('Error fetching vaccinated students:', error);\r\n      return [];\r\n    }\r\n  };\r\n  \r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value\r\n    });\r\n    \r\n    // Clear error for this field when user changes it\r\n    if (formErrors[name]) {\r\n      setFormErrors({\r\n        ...formErrors,\r\n        [name]: null\r\n      });\r\n    }\r\n  };\r\n  \r\n  const validateForm = () => {\r\n    const errors = {};\r\n    \r\n    if (!formData.vaccine) errors.vaccine = 'Vaccine is required';\r\n    if (!formData.date) errors.date = 'Date is required';\r\n    if (!formData.doses_available) errors.doses_available = 'Number of doses is required';\r\n    if (!formData.applicable_grades) errors.applicable_grades = 'Applicable grades is required';\r\n    \r\n    // Validate date is at least 15 days in the future\r\n    const minDate = getMinDate();\r\n    if (formData.date && formData.date < minDate) {\r\n      errors.date = `Date must be at least 15 days in the future (after ${minDate})`;\r\n    }\r\n    \r\n    // Check if doses is a positive number\r\n    if (formData.doses_available && parseInt(formData.doses_available, 10) <= 0) {\r\n      errors.doses_available = 'Number of doses must be positive';\r\n    }\r\n    \r\n    // Check if applicable grades has valid format\r\n    if (formData.applicable_grades && !/^[0-9]+(-[0-9]+)?$/.test(formData.applicable_grades)) {\r\n      errors.applicable_grades = 'Format should be like \"5\" or \"5-7\"';\r\n    }\r\n    \r\n    return errors;\r\n  };\r\n  \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setFormErrors({});\r\n    setSuccess('');\r\n    \r\n    // Validate form\r\n    const errors = validateForm();\r\n    if (Object.keys(errors).length > 0) {\r\n      setFormErrors(errors);\r\n      return;\r\n    }\r\n    \r\n    setSaving(true);\r\n    \r\n    try {\r\n      if (isEditMode) {\r\n        await axios.put(`http://localhost:8000/api/drives/${id}/`, formData);\r\n        setSuccess('Vaccination drive updated successfully');\r\n      } else {\r\n        const response = await axios.post('http://localhost:8000/api/drives/', formData);\r\n        setSuccess('Vaccination drive created successfully');\r\n        // Navigate to edit page for the newly created drive\r\n        setTimeout(() => {\r\n          navigate(`/drives/edit/${response.data.id}`);\r\n        }, 1500);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error saving drive:', error);\r\n      \r\n      if (error.response && error.response.data) {\r\n        // Handle field-specific errors\r\n        if (typeof error.response.data === 'object') {\r\n          if (error.response.data.date) {\r\n            // Handle date validation error\r\n            setFormErrors({\r\n              ...formErrors,\r\n              date: Array.isArray(error.response.data.date) \r\n                ? error.response.data.date[0] \r\n                : error.response.data.date\r\n            });\r\n          } else {\r\n            // Handle other field errors\r\n            setFormErrors(error.response.data);\r\n          }\r\n        } else {\r\n          // Generic error\r\n          setError(error.response.data.toString() || 'Failed to save vaccination drive');\r\n        }\r\n      } else {\r\n        setError('Failed to save vaccination drive. Please try again.');\r\n      }\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n  \r\n  const handleOpenStudentDialog = async () => {\r\n    try {\r\n      setError('');\r\n      setLoadingStudents(true);\r\n      \r\n      // Ensure we have grade values to use\r\n      if (!formData.applicable_grades) {\r\n        setError('Please specify applicable grades before adding students');\r\n        setLoadingStudents(false);\r\n        return;\r\n      }\r\n      \r\n      // Get students that can be vaccinated (not already vaccinated with this vaccine)\r\n      // Parse the grade range\r\n      let minGrade, maxGrade;\r\n      if (formData.applicable_grades.includes('-')) {\r\n        const grades = formData.applicable_grades.split('-');\r\n        minGrade = parseInt(grades[0], 10);\r\n        maxGrade = parseInt(grades[1], 10);\r\n      } else {\r\n        minGrade = maxGrade = parseInt(formData.applicable_grades, 10);\r\n      }\r\n      \r\n      console.log(`Fetching students for grades ${minGrade} to ${maxGrade}`);\r\n      \r\n      // Fetch all students\r\n      const studentsResponse = await axios.get('http://localhost:8000/api/students/');\r\n      console.log(\"All students:\", studentsResponse.data);\r\n      \r\n      // Fetch current vaccinated students to exclude them\r\n      const currentVaccinated = await refreshVaccinatedStudents();\r\n      const vaccinatedIds = currentVaccinated.map(v => v.student);\r\n      \r\n      // Filter eligible students\r\n      const eligibleStudents = studentsResponse.data.filter(student => {\r\n        const studentGrade = parseInt(student.grade, 10);\r\n        // Check grade in range\r\n        const gradeInRange = studentGrade >= minGrade && studentGrade <= maxGrade;\r\n        // Check not already vaccinated\r\n        const notVaccinated = !vaccinatedIds.includes(student.id);\r\n        \r\n        return gradeInRange && notVaccinated;\r\n      });\r\n      \r\n      console.log(\"Eligible students:\", eligibleStudents);\r\n      setAvailableStudents(eligibleStudents);\r\n      setOpenStudentDialog(true);\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching available students:', error);\r\n      setError('Failed to load available students: ' + (error.response?.data?.detail || error.message));\r\n    } finally {\r\n      setLoadingStudents(false);\r\n    }\r\n  };\r\n  \r\n  const handleVaccinateStudents = async () => {\r\n    if (selectedStudents.length === 0) {\r\n      setError('Please select at least one student');\r\n      return;\r\n    }\r\n    \r\n    setError('');\r\n    setSuccess('');\r\n    setSaving(true);\r\n    \r\n    try {\r\n      console.log(\"Sending student IDs:\", selectedStudents.map(s => s.id));\r\n      \r\n      // Check if we have enough doses left\r\n      const currentVaccinations = await refreshVaccinatedStudents();\r\n      const currentCount = currentVaccinations.length;\r\n      const remainingDoses = formData.doses_available - currentCount;\r\n      \r\n      if (selectedStudents.length > remainingDoses) {\r\n        setError(`Cannot add ${selectedStudents.length} students. Only ${remainingDoses} doses available.`);\r\n        setSaving(false);\r\n        return;\r\n      }\r\n      \r\n      // Create vaccinations directly\r\n      const vaccinationPromises = selectedStudents.map(student => \r\n        axios.post('http://localhost:8000/api/vaccinations/', {\r\n          student: student.id,\r\n          vaccination_drive: id,\r\n          date_administered: new Date().toISOString().split('T')[0]\r\n        })\r\n      );\r\n      \r\n      await Promise.all(vaccinationPromises);\r\n      \r\n      // Refresh vaccinated students list\r\n      await refreshVaccinatedStudents();\r\n      \r\n      setSuccess(`Successfully vaccinated ${selectedStudents.length} students`);\r\n      \r\n      // Close dialog and reset selection\r\n      setOpenStudentDialog(false);\r\n      setSelectedStudents([]);\r\n      \r\n    } catch (error) {\r\n      console.error('Error vaccinating students:', error);\r\n      setError(error.response?.data?.detail || 'Failed to vaccinate students: ' + error.message);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n  \r\n  const handleStudentSearchChange = (e, value) => {\r\n    setStudentSearch(value);\r\n  };\r\n  \r\n  const filterStudentsBySearch = () => {\r\n    if (!studentSearch || studentSearch.length < 2) return availableStudents;\r\n    \r\n    return availableStudents.filter(student => {\r\n      const fullName = `${student.first_name} ${student.last_name}`.toLowerCase();\r\n      const id = student.student_id.toLowerCase();\r\n      const search = studentSearch.toLowerCase();\r\n      \r\n      return fullName.includes(search) || id.includes(search);\r\n    });\r\n  };\r\n  \r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  const isPastDrive = isEditMode && new Date(formData.date) < new Date();\r\n  const filteredStudents = filterStudentsBySearch();\r\n  \r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n        <Button\r\n          startIcon={<ArrowBackIcon />}\r\n          onClick={() => navigate('/drives')}\r\n          sx={{ mr: 2 }}\r\n        >\r\n          Back\r\n        </Button>\r\n        <Typography variant=\"h4\">\r\n          {isEditMode ? 'Edit Vaccination Drive' : 'Create Vaccination Drive'}\r\n        </Typography>\r\n      </Box>\r\n      \r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" sx={{ mb: 2 }}>{success}</Alert>\r\n      )}\r\n      \r\n      {isPastDrive && (\r\n        <Alert severity=\"warning\" sx={{ mb: 2 }}>\r\n          This drive is in the past and cannot be edited.\r\n        </Alert>\r\n      )}\r\n      \r\n      <Paper sx={{ p: 3, mb: 4 }}>\r\n        <form onSubmit={handleSubmit}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <FormControl fullWidth error={!!formErrors.vaccine}>\r\n                <InputLabel>Vaccine</InputLabel>\r\n                <Select\r\n                  name=\"vaccine\"\r\n                  value={formData.vaccine}\r\n                  onChange={handleInputChange}\r\n                  label=\"Vaccine\"\r\n                  disabled={isPastDrive || isEditMode} // Don't allow changing vaccine for existing drives\r\n                >\r\n                  <MenuItem value=\"\" disabled>Select a vaccine</MenuItem>\r\n                  {vaccines.map((vaccine) => (\r\n                    <MenuItem key={vaccine.id} value={vaccine.id}>\r\n                      {vaccine.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {formErrors.vaccine && (\r\n                  <Typography variant=\"caption\" color=\"error\">\r\n                    {formErrors.vaccine}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                name=\"date\"\r\n                label=\"Drive Date\"\r\n                type=\"date\"\r\n                value={formData.date}\r\n                onChange={handleInputChange}\r\n                fullWidth\r\n                required\r\n                InputLabelProps={{ shrink: true }}\r\n                disabled={isPastDrive}\r\n                error={!!formErrors.date}\r\n                helperText={formErrors.date || `Must be after ${getMinDate()} (15 days from today)`}\r\n                inputProps={{ min: getMinDate() }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                name=\"doses_available\"\r\n                label=\"Available Doses\"\r\n                type=\"number\"\r\n                value={formData.doses_available}\r\n                onChange={handleInputChange}\r\n                fullWidth\r\n                required\r\n                disabled={isPastDrive}\r\n                error={!!formErrors.doses_available}\r\n                helperText={formErrors.doses_available}\r\n                inputProps={{ min: 1 }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                name=\"applicable_grades\"\r\n                label=\"Applicable Grades\"\r\n                value={formData.applicable_grades}\r\n                onChange={handleInputChange}\r\n                fullWidth\r\n                required\r\n                disabled={isPastDrive}\r\n                error={!!formErrors.applicable_grades}\r\n                helperText={formErrors.applicable_grades || \"E.g., '5-7' for grades 5 to 7, or '5' for just grade 5\"}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<SaveIcon />}\r\n                disabled={saving || isPastDrive}\r\n                sx={{ mt: 2 }}\r\n              >\r\n                {saving ? 'Saving...' : (isEditMode ? 'Update Drive' : 'Create Drive')}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n      \r\n      {/* Vaccinated Students List (only in Edit mode) */}\r\n      {isEditMode && (\r\n        <Box sx={{ mt: 4 }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n            <Typography variant=\"h5\">\r\n              Vaccinated Students\r\n            </Typography>\r\n            \r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              startIcon={<PersonAddIcon />}\r\n              onClick={handleOpenStudentDialog}\r\n              disabled={isPastDrive || loadingStudents}\r\n            >\r\n              {loadingStudents ? 'Loading...' : 'Add Students'}\r\n            </Button>\r\n          </Box>\r\n          \r\n          <Paper sx={{ p: 3 }}>\r\n            {vaccinatedStudents.length === 0 ? (\r\n              <Typography>No students have been vaccinated in this drive yet.</Typography>\r\n            ) : (\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Student ID</TableCell>\r\n                      <TableCell>Name</TableCell>\r\n                      <TableCell>Date Administered</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {vaccinatedStudents.map((record) => (\r\n                      <TableRow key={record.id}>\r\n                        <TableCell>{record.student_id}</TableCell>\r\n                        <TableCell>{record.student_name}</TableCell>\r\n                        <TableCell>{new Date(record.date_administered).toLocaleDateString()}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n                <Box sx={{ mt: 2, textAlign: 'right' }}>\r\n                  <Typography variant=\"body2\">\r\n                    {vaccinatedStudents.length} of {formData.doses_available} doses used\r\n                  </Typography>\r\n                </Box>\r\n              </TableContainer>\r\n            )}\r\n          </Paper>\r\n        </Box>\r\n      )}\r\n      \r\n      {/* Dialog for adding students to the vaccination drive */}\r\n      <Dialog \r\n        open={openStudentDialog} \r\n        onClose={() => !saving && setOpenStudentDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Add Students to Vaccination Drive</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ mb: 3, mt: 1 }}>\r\n            <TextField\r\n              label=\"Search Students\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              value={studentSearch}\r\n              onChange={(e) => setStudentSearch(e.target.value)}\r\n              placeholder=\"Type to search by name or ID...\"\r\n            />\r\n          </Box>\r\n          \r\n          <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n            Showing students in applicable grades who haven't received this vaccine yet.\r\n          </Typography>\r\n          \r\n          {availableStudents.length === 0 && (\r\n            <Typography variant=\"body1\" sx={{ textAlign: 'center', py: 2 }}>\r\n              No eligible students found. All students in the applicable grades may already be vaccinated.\r\n            </Typography>\r\n          )}\r\n          \r\n          {availableStudents.length > 0 && (\r\n            <Box>\r\n              <Box sx={{ mb: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                {selectedStudents.map((student) => (\r\n                  <Chip\r\n                    key={student.id}\r\n                    label={`${student.first_name} ${student.last_name}`}\r\n                    onDelete={() => setSelectedStudents(selectedStudents.filter(s => s.id !== student.id))}\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                  />\r\n                ))}\r\n              </Box>\r\n              \r\n              <TableContainer component={Paper} variant=\"outlined\">\r\n                <Table size=\"small\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Student ID</TableCell>\r\n                      <TableCell>Name</TableCell>\r\n                      <TableCell>Grade</TableCell>\r\n                      <TableCell>Section</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {filteredStudents.length === 0 ? (\r\n                      <TableRow>\r\n                        <TableCell colSpan={4} align=\"center\">\r\n                          No students match your search criteria\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ) : (\r\n                      filteredStudents.slice(0, 10).map((student) => {\r\n                        const isSelected = selectedStudents.some(s => s.id === student.id);\r\n                        \r\n                        return (\r\n                          <TableRow \r\n                            key={student.id}\r\n                            selected={isSelected}\r\n                            hover\r\n                            onClick={() => {\r\n                              if (isSelected) {\r\n                                setSelectedStudents(selectedStudents.filter(s => s.id !== student.id));\r\n                              } else {\r\n                                setSelectedStudents([...selectedStudents, student]);\r\n                              }\r\n                            }}\r\n                            sx={{ cursor: 'pointer' }}\r\n                          >\r\n                            <TableCell>{student.student_id}</TableCell>\r\n                            <TableCell>{`${student.first_name} ${student.last_name}`}</TableCell>\r\n                            <TableCell>{student.grade}</TableCell>\r\n                            <TableCell>{student.section}</TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })\r\n                    )}\r\n                    {filteredStudents.length > 10 && (\r\n                      <TableRow>\r\n                        <TableCell colSpan={4} align=\"center\">\r\n                          {filteredStudents.length - 10} more students available. Refine your search to see more.\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenStudentDialog(false)} disabled={saving}>Cancel</Button>\r\n          <Button \r\n            onClick={handleVaccinateStudents} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={selectedStudents.length === 0 || saving}\r\n          >\r\n            {saving ? 'Processing...' : `Add Selected Students (${selectedStudents.length})`}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default DriveForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}